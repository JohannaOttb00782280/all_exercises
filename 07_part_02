// change of number of functions calls with n: 
// for the first function it is linear as for each increase in n the function gets called one more time (exact it takes n+1 steps). For the second function second the number of calls increases at the ns that are part of the n^2 sequence. The increase is of the size of the previous number of steps *2 +1  (starting with  the number of steps =1 for n = 0). Reason: a^n for even n >1 are made up of 2* a previous n so it takes twice as many calls as for the previous n. For the uneven n>1 the same number of calls is needed as for n-1 as the difference in the return expression is the "a" which does not trigger another call of the function.   

#include <iostream>
using namespace std; 
int run_needed_01,run_needed_02;

int n_calc(int a, int n){
  ::run_needed_01++;
  if (n==0){return 1;}
  else { return a * n_calc(a,n-1);}
}

int n_calc_2nd_version(int a, int n){
  ::run_needed_02++;
  if (n==0){return 1;}
  else{
    if (n%2==0){
      return n_calc_2nd_version(a,n/2) * n_calc_2nd_version(a,n/2);}
    else {return n_calc_2nd_version(a,n/2) * n_calc_2nd_version(a,n/2)* a;}
  }
}

int main() {
  int a=2,n,nth_pow,temp;
  for (n=1;n<=20;n++) {
    ::run_needed_01=0;
    ::run_needed_02=0;
    nth_pow =  n_calc_2nd_version(a,n);
    temp = n_calc(a,n);
    cout << n<<"th power of 2 is: "<< nth_pow<<endl;
    cout <<" number of runs in the first function: "<<run_needed_01<< endl;
    cout <<" number of runs in the second function: " <<run_needed_02<< endl;

  }

}
